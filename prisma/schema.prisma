generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  roleId       String?
  fullName     String
  email        String   @unique
  password     String
  phone        String   @unique
  companyId    String?
  refreshToken String?
  isActive     Boolean  @default(false) // need to remove this NO USE 
  isDeleted    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  Company              Company?             @relation(fields: [companyId], references: [id])
  JobsCreated          Job[]
  ApplicationNotes     ApplicationNote[]
  ApplicationHistories ApplicationHistory[]

  UserPermissions    UserPermission[]
  GroupMember        GroupMember[]
  Role               Role?               @relation(fields: [roleId], references: [id])
  CompanyAssingments CompanyAssingment[]
}

model Role {
  id          String    @id @default(uuid())
  companyId   String?
  code        String
  name        String
  roleType    UserType?
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Users     User[]
  Groups    Group[]
}

model Group {
  id           String                   @id @default(uuid())
  name         String                   @unique
  Permissions  GroupPermission[]
  Members      GroupMember[]
  roleId       String?
  Role         Role?                    @relation(fields: [roleId], references: [id])
  // CompanyGroup CompanyGroupAssingment[]
}

model Permission {
  id              String            @id @default(uuid())
  codename        String            @unique
  name            String
  GroupPermission GroupPermission[]
  UserPermission  UserPermission[]
}

model GroupPermission {
  groupId      String
  permissionId String

  Group      Group      @relation(fields: [groupId], references: [id], onDelete: Cascade)
  Permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([groupId, permissionId])
}

model UserPermission {
  userId       String
  permissionId String

  User       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([userId, permissionId])
}

model GroupMember {
  userId  String
  groupId String

  User  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  Group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  // @@unique([userId]) <-one userId can appear only once 

  @@id([userId, groupId])
}

model Company {
  id                     String                   @id @default(uuid())
  name                   String
  logoUrl                String?
  websiteUrl             String?
  careerPageUrl          String?                  @unique
  description            String?
  status                 CompanyStatus            @default(ACTIVE)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  isDeleted              Boolean                  @default(false)
  // Relations
  Users                  User[]
  Jobs                   Job[]
  Applications           Application[]
  Department             Department[]
  Role                   Role[]
  roleId                 String?
  CompanyAssingments     CompanyAssingment[]
  // CompanyGroup CompanyGroupAssingment[]
}

model Department {
  id          String   @id @default(uuid())
  companyId   String
  name        String
  description String?
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  job     Job[]
  Company Company @relation(fields: [companyId], references: [id])

  @@unique([name, companyId])
}

model Job {
  id               String         @id @default(uuid())
  companyId        String
  departmentId     String
  title            String
  location         String
  experience       String?
  salaryRange      String?
  employmentType   EmploymentType
  description      String
  responsibilities String
  requirements     String
  createdById      String
  isDeleted        Boolean        @default(false)
  published        Boolean        @default(false)
  status           JobStatus      @default(DRAFT)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  // Relations
  CreatedBy   User          @relation(fields: [createdById], references: [id])
  Company     Company       @relation(fields: [companyId], references: [id])
  Department  Department?   @relation(fields: [departmentId], references: [id])
  Application Application[]
}

model Application {
  id            String            @id @default(uuid())
  jobId         String
  companyId     String
  candidateName String
  email         String
  phone         String
  resumeUrl     String
  experience    Json?
  skills        String[]
  currentCTC    String?
  expectedCTC   String?
  noticePeriod  String?
  isDeleted     Boolean           @default(false)
  status        ApplicationStatus @default(APPLIED)
  source        String            @default("Career Page") // e.g., "Career Page", "LinkedIn", "Referral"
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  //Relations
  Job     Job                  @relation(fields: [jobId], references: [id])
  Company Company              @relation(fields: [companyId], references: [id])
  Notes   ApplicationNote[]
  History ApplicationHistory[]
}

model ApplicationNote {
  id            String   @id @default(uuid())
  applicationId String
  userId        String
  note          String
  createdAt     DateTime @default(now())
  isDeleted     Boolean  @default(false)

  Application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  User        User        @relation(fields: [userId], references: [id])
}

model ApplicationHistory {
  id            String             @id @default(uuid())
  applicationId String
  oldStatus     ApplicationStatus?
  newStatus     ApplicationStatus
  changeById    String
  changedAt     DateTime           @default(now())

  Application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  ChangedBy   User        @relation(fields: [changeById], references: [id])
}

model CompanyAssingment {
  id        String   @id @default(uuid())
  companyId String
  userId    String
  createdAt DateTime @default(now())
  Company   Company  @relation(fields: [companyId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

// model CompanyGroupAssingment {
//   id        String   @id @default(uuid())
//   companyId String
//   groupId   String
//   createdAt DateTime @default(now())
//   Company   Company  @relation(fields: [companyId], references: [id])
//   Group     Group    @relation(fields: [groupId], references: [id])
// }

enum CompanyStatus {
  ACTIVE
  INACTIVE
}

enum EmploymentType {
  FULL_TIME
  CONTRACT
  INTERNSHIP
}

enum JobStatus {
  ACTIVE
  CLOSED
  DRAFT
}

enum ApplicationStatus {
  APPLIED
  SHORTLISTED
  INTERVIEW
  OFFERED
  HIRED
  REJECTED
}

enum UserType {
  USER
  SYSTEM
  INTERNAL
  CLIENT
}
